(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{414:function(t,s,a){"use strict";a.r(s);var n=a(4),_=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("ul",[s("li",[s("h3",{attrs:{id:"优点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[t._v("#")]),t._v(" 优点")]),t._v(" "),s("ol",[s("li",[t._v("减少服务器需要扫描的数据量")]),t._v(" "),s("li",[t._v("避免排序和临时表")]),t._v(" "),s("li",[t._v("将随机IO变为顺序IO")])]),t._v(" "),s("h3",{attrs:{id:"分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分类"}},[t._v("#")]),t._v(" 分类")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("从存储结构上来划分")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("B-Tree索引（B-Tree或B+Tree索引）：最常用的索引")])]),t._v(" "),s("li",[s("p",[t._v("Hash索引：基于hash表实现，memory引擎显示支持，InnoDB不支持哈希索引，但有一个自适应哈希索引功能，当一个索引值使用得非常频繁时，会基于B-Tree索引之上再创建一个哈希索引来加速查找，这是一个内部行为，用户无法操控。")])]),t._v(" "),s("li",[s("p",[t._v("full-index（全文索引）：用于查找文本中的关键词")])]),t._v(" "),s("li",[s("p",[t._v("R-Tree索引：空间索引，用于地理存储。不支持前缀查询。 MyISAM支持。")])])])]),t._v(" "),s("li",[s("p",[t._v("从应用层次来分")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("普通索引：即一个索引只包含单个列，一个表可以有多个单列索引")])]),t._v(" "),s("li",[s("p",[t._v("唯一索引：索引列的值必须唯一，但允许有空值")])]),t._v(" "),s("li",[s("p",[t._v("复合索引：即一个索引包含多个列")])])])]),t._v(" "),s("li",[s("p",[t._v("根据中数据的物理顺序与键值的逻辑（索引）顺序关系")]),t._v(" "),s("ul",[s("li",[t._v("聚簇索引(聚集索引)：并不是一种单独的索引类型，而是一种数据存储方式。InnoDB的聚簇索引其实就是在同一个结构中保存了索引和数据行。")]),t._v(" "),s("li",[t._v("非聚集索引：索引和数据行分开，但是保存额外的主键值，用于查询数据行")])])])]),t._v(" "),s("h3",{attrs:{id:"b-tree索引原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#b-tree索引原理"}},[t._v("#")]),t._v(" B+Tree索引原理")]),t._v(" "),s("h4",{attrs:{id:"系统如何进行io读取"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#系统如何进行io读取"}},[t._v("#")]),t._v(" 系统如何进行IO读取")]),t._v(" "),s("p",[t._v("由于IO读取是高昂的操作，计算机系统对IO进行了一些优化，当一次IO时，不光把当前磁盘地址的数据，而是把相邻的数据也都读取到内存缓冲区内，每一次IO读取的数据我们称之为一页(page)。具体一页有多大数据跟操作系统有关，一般为4k或8k，也就是我们读取一页内的数据时候，实际上才发生了一次IO。")]),t._v(" "),s("h4",{attrs:{id:"b-树机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#b-树机制"}},[t._v("#")]),t._v(" B+树机制")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/soda1/img/main/7af22798.jpg",alt:"b+树"}})]),t._v(" "),s("ul",[s("li",[s("p",[t._v("多路表示非叶节点的子节点数>1，且<=M ，且M>=2。图中为3路搜索树")])]),t._v(" "),s("li",[s("p",[t._v("浅蓝色部分是磁盘块，代表的是一次IO读取的数据。")]),t._v(" "),s("ul",[s("li",[t._v("蓝色部分是"),s("strong",[t._v("数据项")]),t._v("（"),s("strong",[t._v("关键字")]),t._v("）")])])]),t._v(" "),s("li",[s("p",[t._v("黄色部分是"),s("strong",[t._v("指针")]),t._v("，指向下一个子节点的磁盘块")])]),t._v(" "),s("li",[s("p",[t._v("所有叶子节点均在同一层,只有叶子节点才会存储真正的数据，包含了"),s("strong",[t._v("关键字")]),t._v("和"),s("strong",[t._v("关键字记录的指针")]),t._v("。每个叶子节点都有指向右叶子节点的指针。非叶子节点只存储数据项，如17，35并没有真实存在数据当中。")])]),t._v(" "),s("li",[s("p",[t._v("一次查找过程（查找数据28）")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("第一次IO：将磁盘块1读取到内存中，因为数据28在17和35之间，所以读取磁盘块1指针P2指向的磁盘块3")])]),t._v(" "),s("li",[s("p",[t._v("第二次IO：将磁盘块3读取到内存中，因为数据28在26和30之间，所以读取磁盘块3指针P2指向的磁盘块8")])]),t._v(" "),s("li",[s("p",[t._v("第三次IO：将磁盘8读取到内存中，找到数据28")])])]),t._v(" "),s("p",[t._v("一次查找过程只用了三次IO就能够找到数据。一般3层b+树可以表示百万的数据，也就是查找上百万的数据只要三次IO，提升是巨大的")])]),t._v(" "),s("li",[s("p",[t._v("性质")]),t._v(" "),s("ul",[s("li",[t._v("IO次数由树高h决定，假设数据为N，每个磁盘块数据项为m，那么有h=log(m+1)N，当数据N一定的情况下，m越大，则h越小，而m = 磁盘块大小/数据项大小。因为磁盘块大小是固定的，因此存储的数据项越小，存储的数据就越多，树的高度就越低。这就是为什么b+树只在叶子节点存储真实数据。b树是所有节点都保存真实数据")]),t._v(" "),s("li",[t._v("当b+树的数据项是复合的数据结构，比如(name,age,sex)的时候，b+数是按照从左到右的顺序来建立搜索树的，比如当(张三,20,F)这样的数据来检索的时候，b+树会优先比较name来确定下一步的所搜方向，如果name相同再依次比较age和sex，最后得到检索的数据；但当(20,F)这样的没有name的数据来的时候，b+树就不知道下一步该查哪个节点，因为建立搜索树的时候name就是第一个比较因子，必须要先根据name来搜索才能知道下一步去哪里查询。比如当(张三,F)这样的数据来检索时，b+树可以用name来指定搜索方向，但下一个字段age的缺失，所以只能把名字等于张三的数据都找到，然后再匹配性别是F的数据了， 这个是非常重要的性质，即"),s("strong",[t._v("索引的最左匹配特性")])])])])]),t._v(" "),s("h4",{attrs:{id:"b树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#b树"}},[t._v("#")]),t._v(" B树")]),t._v(" "),s("p",[t._v("B树和B+树的主要在存储机制上有区别，B树的非叶子节点和叶子节点都包含键值和相关的数据，而且非叶子节点中的关键字也存在于子节点中")]),t._v(" "),s("p",[s("strong",[t._v("为什么说B+树比B树更适合实际应用中操作系统的文件索引和数据库索引？")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("B+树的磁盘读写代价更低")]),t._v(" "),s("p",[t._v("B+树的内部结点并没有指向关键字具体信息的指针。因此其内部结点相对B 树更小。如果把所有同一内部结点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多。一次性读入内存中的需要查找的关键字也就越多。相对来说IO读写次数也就降低了。")])]),t._v(" "),s("li",[s("p",[t._v("B+树的查询效率更加稳定")]),t._v(" "),s("p",[t._v("由于非终结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引。所以任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。")])])]),t._v(" "),s("h3",{attrs:{id:"高性能索引策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#高性能索引策略"}},[t._v("#")]),t._v(" 高性能索引策略")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("独立的列")]),t._v(" "),s("p",[t._v("在查询中列不能作为表达式的一部分，否则无法使用索引")])]),t._v(" "),s("li",[s("p",[t._v("前缀索引")]),t._v(" "),s("p",[t._v("有时候列的长度特别的长，索引很占空间。这时候可以使用前缀索引来平衡查询和索引空间，当然了这会降低索引的选择性，需要通过计算公式来让前缀索引的基数接近于完整列索引的基数")]),t._v(" "),s("p",[t._v("​\t\t\t\n$$\n\\frac{count(distinct(left(col, n)))}{count("),s("em",[t._v(")} \\approx \\frac{count(distinct(col))}{count(")]),t._v(")}\n$$\ncol为索引列，left(col, n)表示截取到第n个字符")])]),t._v(" "),s("li",[s("p",[t._v("多列索引")]),t._v(" "),s("p",[t._v("单列索引MySQL在5.0版本以上有采用索引合并策略（index merge），实际上就是按每列先查询出单独的结果，然后再进行and/or操作，都是比较耗CPU及内存的。如果explain出现这种结果可能更多的说明我们的索引建的比较的糟糕。")]),t._v(" "),s("p",[t._v("在多列索引创建中，一般来说，选择性高的列放在前面的时候是一个比较好的选择，如果涉及到排序和分组这些操作就需要根据具体情况来决定了，尽量避免随机IO和分组操作")])]),t._v(" "),s("li",[s("p",[t._v("聚簇索引顺序写入")]),t._v(" "),s("ol",[s("li",[t._v("避免大量的随机IO")]),t._v(" "),s("li",[t._v("避免页分裂操作，如果写入是乱序的，InnoDB会频繁的做页分裂操作")]),t._v(" "),s("li",[t._v("避免数据碎片，频繁的页分裂会导致页的稀疏及不规则填充")])])]),t._v(" "),s("li",[s("p",[t._v("覆盖索引")]),t._v(" "),s("p",[t._v("当使用了二级索引进行查询时，会将获取到的主键值再去聚簇索引查询，从而获得数据行（这种行为称为回表操作）。InnoDB的二级索引存储的是主键的值是为了减少当聚簇索引出现行移动或数据分页操作时二级索引的维护工作")]),t._v(" "),s("p",[t._v("覆盖索引可以避免回表的操作，从而提高效率，但是使用条件比较的苛刻，需要查询列和选择列都能通过索引覆盖。日常业务不太能用得到")])]),t._v(" "),s("li",[s("p",[t._v("使用索引排序")]),t._v(" "),s("p",[t._v("索引用于查找又用于排序，避免临时排序")])]),t._v(" "),s("li",[s("p",[t._v("冗余和重复索引")]),t._v(" "),s("p",[t._v("一般来说冗余和重复索引是无用的，但如果需要额外增加的一列很大，会让先去的查询变慢，出于性能要求可以考虑使用冗余索引")])])]),t._v(" "),s("h3",{attrs:{id:"实战技巧"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实战技巧"}},[t._v("#")]),t._v(" 实战技巧")]),t._v(" "),s("ol",[s("li",[t._v("对于大多数查询都用到的列a，那么在索引可以考虑加上a列，如果查询没有使用到a列，可以使用IN条件来绕过，从而让MySQL选择该索引，比如sex in ('m', 'f')。如果列有太多不同的值，那就没并要这么做了。")])]),t._v(" "),s("h3",{attrs:{id:"索引统计信息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#索引统计信息"}},[t._v("#")]),t._v(" 索引统计信息")]),t._v(" "),s("ol",[s("li",[t._v("使用SHOW INDEX FROM TABLE查看索引的基数")]),t._v(" "),s("li",[t._v("使用ANALYZE TABLE更新索引统计信息")]),t._v(" "),s("li",[t._v("使用OPTIMIZE TABLE重建表，减少索引和数据碎片")])]),t._v(" "),s("h3",{attrs:{id:"索引语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#索引语法"}},[t._v("#")]),t._v(" 索引语法")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("创建")]),t._v(" "),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UNIQUE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INDEX")]),t._v(" index_name "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" table_name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("columnname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--create 语句  ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" tbl_name "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("column_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--该语句添加一个主键，这意味着索引值必须是唯一的，且不能为NULL。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" tbl_name "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UNIQUE")]),t._v(" index_name "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("column_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--这条语句创建索引的值必须是唯一的（除了NULL外，NULL可能会出现多次）。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" tbl_name "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INDEX")]),t._v(" index_name "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("column_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--添加普通索引，索引值可出现多次。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" tbl_name "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" FULLTEXT index_name "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("column_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(":"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--该语句指定了索引为 FULLTEXT ，用于全文索引。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--创建表时建立索引")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("create")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" tb_name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UNIQUE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" FULLTEXT "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" SPATIAL "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INDEX")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" 别名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" 属性名"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("长度"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ASC")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DESC")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])])]),t._v(" "),s("li",[s("p",[t._v("删除")]),t._v(" "),s("p",[s("code",[t._v("DROP INDEX [indexName] ON mytable;")])])]),t._v(" "),s("li",[s("p",[t._v("查看")]),t._v(" "),s("p",[s("code",[t._v("SHOW INDEX FROM table_name")])])])])])])])}),[],!1,null,null,null);s.default=_.exports}}]);