(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{441:function(s,a,t){"use strict";t.r(a);var e=t(4),n=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h5",{attrs:{id:"文件的四种状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件的四种状态"}},[s._v("#")]),s._v(" 文件的四种状态")]),s._v(" "),a("p",[s._v("版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。")]),s._v(" "),a("ul",[a("li",[s._v("Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过"),a("code",[s._v("git add")]),s._v(" 状态变为Staged.")]),s._v(" "),a("li",[s._v("Unmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified. 如果使用"),a("code",[s._v("git rm")]),s._v("移出版本库, 则成为Untracked文件")]),s._v(" "),a("li",[s._v("Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用git checkout 则丢弃修改过, 返回到unmodify状态, 这个"),a("code",[s._v("git checkout -- file")]),s._v("即从库中取出文件, 覆盖当前修改 !")]),s._v(" "),a("li",[s._v("Staged: 暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git reset HEAD filename取消暂存, 文件状态为Modified")])]),s._v(" "),a("h5",{attrs:{id:"查看帮助文档"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看帮助文档"}},[s._v("#")]),s._v(" 查看帮助文档")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git [command] --help\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h5",{attrs:{id:"初始化本地仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始化本地仓库"}},[s._v("#")]),s._v(" 初始化本地仓库")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git init\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/soda1/img/main/20201123190404.png",alt:"image-20201123190404628"}})]),s._v(" "),a("h5",{attrs:{id:"git克隆远程仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git克隆远程仓库"}},[s._v("#")]),s._v(" git克隆远程仓库")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git clone https/ssh\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/soda1/img/main/20201124000121.png",alt:"image-20201124000121255"}})]),s._v(" "),a("h5",{attrs:{id:"git绑定远程仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git绑定远程仓库"}},[s._v("#")]),s._v(" git绑定远程仓库")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" remote "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" origin ssl/hhtp\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#设置上传分支并上传")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" push --set-upstream origin master \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h5",{attrs:{id:"提交三板斧"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#提交三板斧"}},[s._v("#")]),s._v(" 提交三板斧")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#查看指定文件状态\ngit status [file-name]\n#查看所有文件状态\ngit status\n# 添加所有文件到暂存区\ngit add .\n# 提交暂存区中的内容到本地仓库 -m 提交信息\ngit commit -m "消息内容"   \n#先拉取远程仓库的最新内容,防止发生冲突\ngit pull\n#同步到远程仓库\ngit push\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/soda1/img/main/20201123190646.png",alt:"image-20201123190646921"}})]),s._v(" "),a("h5",{attrs:{id:"查看历史版本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看历史版本"}},[s._v("#")]),s._v(" 查看历史版本")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("#查看单个文件的历史版本\ngit log <file-name>\n#查看提交的历史版本\ngit log\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h5",{attrs:{id:"checkout使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#checkout使用"}},[s._v("#")]),s._v(" checkout使用")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("#从库中取出文件覆盖修改\ngit checkout -- file-name  \n#将文件回退到某个版本\ngit checkout commit_id -- file-name\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/soda1/img/main/20201123233303.png",alt:"image-20201123233303532"}})]),s._v(" "),a("h5",{attrs:{id:"取消暂存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#取消暂存"}},[s._v("#")]),s._v(" 取消暂存")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git reset HEAD file-name\n#取消所有暂存\ngit restore --staged .\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/soda1/img/main/20201123232716.png",alt:"image-20201123232716609"}})]),s._v(" "),a("h5",{attrs:{id:"取消更改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#取消更改"}},[s._v("#")]),s._v(" 取消更改")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("#丢弃工作区更改内容\ngit restore file\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h5",{attrs:{id:"diff差异比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#diff差异比较"}},[s._v("#")]),s._v(" diff差异比较")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("#不加参数即默认比较工作区与暂存区\ngit diff\n#比较暂存区与最新本地版本库（本地库中最近一次commit的内容）\ngit diff --cached [<path>...]\n#比较工作区与最新本地版本库。如果HEAD指向的是master分支，那么HEAD还可以换成master\ngit diff HEAD [<path>...]\n#比较工作区与指定commit-id的差异　　　　　　\ngit diff commit-id [<path>...]\n#比较暂存区与指定commit-id的差异\ngit diff --cached [<commit-id>] [<path>...]\n#比较两个commit-id之间的差异\ngit diff [<commit-id>] [<commit-id>]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("h5",{attrs:{id:"发生错误了想回退某一版本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#发生错误了想回退某一版本"}},[s._v("#")]),s._v(" 发生错误了想回退某一版本")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("reset")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# 先查看提交历史，确认需要回退的版本\ngit log\n# 进行版本回退，回到指定版本的状态\n# --hard:\n# Resets the index and working tree. Any changes to tracked files in the working tree since <commit> are discarded\ngit reset --hard commit_id\n# 强推送至远程分支\ngit push  --force\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/soda1/img/main/20201123191052.png",alt:"image-20201123191052324"}})]),s._v(" "),a("p",[s._v("回到指定某一个版本，但是此版本之后的提交都会消失，好像没有发生过一样。幸运的是 git reflog 会记录下所有的commit_id，因此还是可以在任意版本中穿梭")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# 查看操作的所有记录\ngit reflog\n# 回退到指定版本\ngit reset commit_id\n#重新提交三板斧\ngit add.\ngit commit -m ' '\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/soda1/img/main/20201123191357.png",alt:"image-20201123191357052"}})])]),s._v(" "),a("li",[a("p",[s._v("revert")]),s._v(" "),a("p",[s._v("对已经commit的代码再commit一次，对已提交的代码没有影响")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("#先查看提交历史，确认需要回退的版本\ngit log\n#进行版本回退，回到指定版本的状态\ngit revert commit_id\n#如果有争议想丢掉这次revert，可以使用\ngit revert --abort\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("revert可能会产生争议参考https://stackoverflow.com/questions/13008170/im-not-able-to-revert-a-file-while-its-conflicting-git")])])]),s._v(" "),a("h5",{attrs:{id:"修改最后一次本地提交的消息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改最后一次本地提交的消息"}},[s._v("#")]),s._v(" 修改最后一次本地提交的消息")]),s._v(" "),a("p",[s._v("如果最后一次commit已经push了那么就应当不要再做修改了（修改后再次push会报错的）。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git commit -amend\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h5",{attrs:{id:"git-分支常用命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-分支常用命令"}},[s._v("#")]),s._v(" git 分支常用命令")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# 列出所有本地分支\ngit branch\n# 列出所有远程分支\ngit branch -r\n# 新建一个分支，但依然停留在当前分支\ngit branch [branch-name]\n# 新建一个分支，并切换到该分支\ngit checkout -b [branch]\n#切换分支\ngit checkout branch-name\n# 合并指定分支到当前分支\n$ git merge [branch]\n# 删除分支\n$ git branch -d [branch-name]\n# 删除远程分支\n$ git push origin --delete [branch-name]$ git branch -dr [remote/branch]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("h5",{attrs:{id:"git-revert和git-reset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-revert和git-reset"}},[s._v("#")]),s._v(" git revert和git reset")]),s._v(" "),a("p",[a("code",[s._v("git reset")]),s._v(" 会将当前分支的 HEAD 指针指向指定的提交，永久性地删除指定提交之后的所有提交，因此谨慎使用。")]),s._v(" "),a("p",[a("code",[s._v("git revert")]),s._v(" 则是撤销指定提交的操作，它会创建一个新的提交来撤销指定提交的更改。这样做可以保留指定提交之后的提交历史，因此更加安全。")]),s._v(" "),a("p",[s._v("使用 "),a("code",[s._v("git revert")]),s._v(" 可以撤销某个提交，同时保留该提交之后的所有更改，这对于团队协作和版本控制非常有用。而使用 "),a("code",[s._v("git reset")]),s._v(" 则会将提交历史永久性地修改，不适合在公共分支上使用。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#commit b5a121096ac1e90957379b707ff1d9c5ce3f3657(head -> master)")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#commit 352d08eb8afdbf349d26c161e6719b1e2aeddc1b")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#当前有两个提交")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" reset 352d08eb8afdbf349d26c161e6719b1e2aeddc1b "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#log记录将只有352d08eb8afdbf349d26c161e6719b1e2aeddc1b这一条记录，当前提交之后的修改转为Unstaged状态")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" revet 352d08eb8afdbf349d26c161e6719b1e2aeddc1b "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#会撤销指定提交")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])])])}),[],!1,null,null,null);a.default=n.exports}}]);