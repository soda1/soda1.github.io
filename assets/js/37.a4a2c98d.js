(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{395:function(v,a,s){"use strict";s.r(a);var _=s(4),t=Object(_.a)({},(function(){var v=this,a=v._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("h4",{attrs:{id:"类加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类加载"}},[v._v("#")]),v._v(" 类加载")]),v._v(" "),a("p",[v._v("类加载有三个阶段：")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("加载")]),v._v(" "),a("p",[v._v("将class文件转换成字节流，并将静态数据转成方法区的运行时数据结构，然后在堆中生成一个Class对象")])]),v._v(" "),a("li",[a("p",[v._v("链接")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("验证")]),v._v(" "),a("p",[v._v("验证class文件中的字节流是否符合虚拟机的要求，包括有"),a("strong",[v._v("文件格式的验证，元数据的验证，字节码验证，符号引用验证")])])]),v._v(" "),a("li",[a("p",[v._v("准备")]),v._v(" "),a("p",[v._v("为类变量分配内存及并设置类变量初始值，该阶段类变量的初始值是jvm中各数据类型的默认初始值")])]),v._v(" "),a("li",[a("p",[v._v("解析")]),v._v(" "),a("p",[v._v("将常量池中的"),a("strong",[v._v("符号引用")]),v._v("替换为"),a("strong",[v._v("直接引用")]),v._v("的过程")])])])]),v._v(" "),a("li",[a("p",[v._v("初始化")]),v._v(" "),a("p",[v._v("执行类构造器方法"),a("code",[v._v("<clinit>()")]),v._v("的过程，类构造器方法是由静态代码块及类变量赋值语句收集而成，收集的顺序取决于它们在源代码中的先后顺序。")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("tips")]),v._v(" "),a("p",[v._v("类构造器方法不需要显示调用父类构造器方法，虚拟机会在子类类构造器方法调用前先调用父类类构造器方法。因此父类类构造器中的赋值语句会优先执行")]),v._v(" "),a("p",[v._v("如果类/接口没有静态代码块及对类变量进行赋值的操作，那么编译器就不会生成类构造方法")]),v._v(" "),a("p",[v._v("接口执行类构造器方法时如果没有使用父类的变量，那么就不会执行父类类构造器方法")]),v._v(" "),a("p",[v._v("虚拟机保证在多线程环境下只能由一个线程去执行类构造器方法")])])])])]),v._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/soda1/img/main/20210305142142.png",alt:"img"}})]),v._v(" "),a("center",[v._v("类加载过程图")]),v._v(" "),a("h4",{attrs:{id:"类装载器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类装载器"}},[v._v("#")]),v._v(" 类装载器")]),v._v(" "),a("ol",[a("li",[a("p",[v._v("java中默认类加载器有三个")]),v._v(" "),a("ol",[a("li",[a("p",[v._v("BootStrap(不是java类）")]),v._v(" "),a("p",[v._v("加载java核心库 rt.jar")])]),v._v(" "),a("li",[a("p",[v._v("ExtClassloader")]),v._v(" "),a("p",[v._v("加载扩展类，加载java_home/jre/lib/ext下jar包")])]),v._v(" "),a("li",[a("p",[v._v("AppClassLoader")]),v._v(" "),a("p",[v._v("加载classpath下的class及jar包")])])]),v._v(" "),a("p",[v._v("也可以自定义类加载器，一般开发中用不到")])]),v._v(" "),a("li",[a("p",[v._v("类加载机制（双亲委派机制）")]),v._v(" "),a("p",[v._v("当一个类加载器收到了类加载请求，它不会立马去加载，而是向上委托父类加载，父类没有则才由自己加载。")])])]),v._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/soda1/img/main/20210305142805.jpg",alt:"img"}})]),v._v(" "),a("h4",{attrs:{id:"类初始化时机"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类初始化时机"}},[v._v("#")]),v._v(" 类初始化时机")]),v._v(" "),a("p",[v._v("主动引用（一定会发生初始化）")]),v._v(" "),a("ol",[a("li",[v._v("要执行的main函数所在的类要进行初始化")]),v._v(" "),a("li",[v._v("new一个类对象")]),v._v(" "),a("li",[v._v("调用一个类变量（常量除外）及静态方法")]),v._v(" "),a("li",[v._v("对类进行反射调用")]),v._v(" "),a("li",[v._v("初始化一个类时，父类若没有初始化，则会先初始化父类")])]),v._v(" "),a("p",[v._v("被动引用（不会发生初始化）")]),v._v(" "),a("ol",[a("li",[a("p",[v._v("调用类的常量（链接阶段就存入调用类的常量池）")])]),v._v(" "),a("li",[a("p",[v._v("数组定义类引用")]),v._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("B")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("]")]),v._v(" bs "),a("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("new")]),v._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("B")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[v._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n")])]),v._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[v._v("1")]),a("br")])])]),v._v(" "),a("li",[a("p",[v._v("访问静态域时，只有声明了这个静态域的类会被初始化")]),v._v(" "),a("p",[v._v("例：B1继承B，B1调用B中的类变量m（B1.m)，只有B会被初始化")])])])],1)}),[],!1,null,null,null);a.default=t.exports}}]);